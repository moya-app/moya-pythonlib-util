[project]
name = "moya-pythonlib-util"
version = "0.12.0"
description = "Moya Python Util Library"
readme = "README.md"
requires-python = ">=3.10"
authors = [
    { name = "Mark Zealey", email = "mark.zealey@moya.app" }
]
maintainers = [
    { name = "Mark Zealey", email = "mark.zealey@moya.app" }
]

dependencies = [
    "sentry-sdk>=2.8.0,<3.0.0",
    "opentelemetry-distro",
]

[project.optional-dependencies]
dev = [
    "ruff==0.9.4",
    "mypy==1.14.1",
    "poethepoet==0.22.0",
    "pytest-asyncio==0.24.0",
    "pytest-cov==4.1.0",
    "pytest-subtests==0.11.0",
    "pytest==8.2.1",
    "respx==0.20.2",
    "types-cachetools==5.3.0.7",
    "time-machine==2.16.0",
]
beartype = [
    "beartype==0.20.2",
]
kafka = [
    "aiokafka[lz4]>=0.9.0",
]
redis = [
    "redis==5.2.0",
]
pydantic-v1 = [
    "pydantic>=1.10.0,<2.0.0",
]
pydantic-v2 = [
    "pydantic>=2.0.0,<3.0.0",
    "pydantic-settings>=2.0.0,<3.0.0",
]
fastapi = [
    "fastapi>=0.115.0",
    "typing-extensions>=4.8.0",
    "sentry-sdk[fastapi]",
    "opentelemetry-instrumentation-fastapi",
    "brotli==1.1.0",
]
# List all optional deps here
all = [ "moya-pythonlib-util[beartype,kafka,redis,fastapi]" ]

[build-system]
requires = ["setuptools >= 61.0"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
packages = ["moya.middleware", "moya.util", "moya.service"]

[tool.ruff]
target-version = "py312"
line-length = 160

[tool.ruff.lint]
# See https://docs.astral.sh/ruff/rules/ for details
select = [
    "E",        # style stuff, whitespaces
    "W",        # style stuff, whitespaces
    "F",        # important pyflake lints
    "I",        # import sorting
    #"A",        # avoid overriding builtins
    #"N",        # pep8 naming
    "B018",     # useless expression
    "RUF100",   # Unnecessary noqa
    #"C",        # complexity
]

[tool.ruff.lint.isort]
combine-as-imports = true

[tool.mypy]
mypy_path = "stubs"
plugins = [
    "pydantic.mypy",
]
python_version = 3.11
ignore_missing_imports = true
disallow_any_generics = true   # Require list[int] instead of list
namespace_packages = true      # For OpenTelemetry to work
disallow_untyped_defs = true   # All functions should have type annotations
warn_redundant_casts = true    # Casting a variable to its own type is disallowed
strict_equality = true         # Error if both sides of a comparison are unequal
strict_optional = true         # Require explicitly specifying None
disallow_untyped_calls = true  # Don't allow calling untyped functions from typed ones
warn_return_any = true         # Don't allow returning Any from a typed function
disallow_any_unimported = true # Show warning when missing type hints cause an imported object to be Any
warn_unreachable = true        # Warn on unreachable code
enable_error_code = "redundant-expr" # Warn on redundant expressions

[[tool.mypy.overrides]]
module = ["tests.*"]
# Allow some laziness in the tests
disallow_untyped_defs = false
disallow_any_generics = false

[tool.poe.tasks]
test = "pytest . --cov=moya --cov-report=term"
"lint:ruff-check" = "ruff check"
"lint:ruff-format" = "ruff format --diff"
"lint:mypy"  = "mypy ."
lint = ["lint:ruff-check", "lint:ruff-format", "lint:mypy"]
"fix:ruff-check" = "ruff check --fix"
"fix:ruff-format" = "ruff format"
fix = ["fix:ruff-check", "fix:ruff-format"]

[tool.pytest.ini_options]
addopts = [ "--strict-markers" ]
asyncio_mode = "auto"
pythonpath = [ "." ]
asyncio_default_fixture_loop_scope = "session"
